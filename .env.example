# -------- Runtime --------
APP_ENV=local
TZ=UTC
LOG_LEVEL=INFO
ENABLE_TELEMETRY=false
METRIC_EXPORT_INTERVAL_SEC=60

# -------- PostgreSQL (Alembic owns schema) --------
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=dovah
POSTGRES_USER=dovah_user
POSTGRES_PASSWORD=change_me_in_production

# Preferred DSN for SQLAlchemy/Alembic (alembic.ini should use: sqlalchemy.url = ${DATABASE_URL})
DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# -------- Feature / Session --------
WINDOW_SIZE_MINUTES=1
SESSION_TIMEOUT_MINUTES=30

# -------- Baselines / Fusion / Alerts --------
ALERT_BATCH_SIZE=100
ALERT_MAX_DELAY_MS=1000
LATENCY_SLO_MS=2000             # P95 target in ms
EXPLANATION_COVERAGE_THRESHOLD=0.95

# -------- GenAI (local by default; set provider keys only if you use cloud) --------
GENAI_PROVIDER=openai           # or local
GENAI_MODEL_NAME=gpt-4
GENAI_MAX_TOKENS=500
GENAI_TEMPERATURE=0.7
OPENAI_API_KEY=                 # set only on your machine or Streamlit Cloud Secrets

# -------- Security (generate real keys locally; never commit them) --------
TENANT_SALT_KEY=change_me_in_production
HMAC_KEY=change_me_in_production
HMAC_DIGEST=sha256

# -------- AWS / S3 (disabled by default; enable on Days 8â€“12) --------
ENABLE_AWS=false
AWS_REGION=eu-west-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

S3_BUCKET_NAME=dovah-evidence
OBJECT_LOCK_MODE=GOVERNANCE
OBJECT_LOCK_RETENTION_DAYS=90

# -------- Streams / Flink (optional prod slice; keep off for MVP) --------
ENABLE_KINESIS=false
KINESIS_STREAM_NAME=dovah-events
KINESIS_SHARD_COUNT=1

ENABLE_FLINK=false
FLINK_PARALLELISM=1
FLINK_CHECKPOINTING_INTERVAL=60000

# -------- Model Serving (optional prod slice) --------
MODEL_SERVING_TYPE=local        # or sagemaker, ecs, fargate, kserve
MODEL_ENDPOINT_NAME=

# Generate strong keys (use these locally, never commit real values):
#   python - <<'PY'
#   import secrets, base64
#   for name in ("TENANT_SALT_KEY","HMAC_KEY"):
#       print(f"{name}="+base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())
#   PY
